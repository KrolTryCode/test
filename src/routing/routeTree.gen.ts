/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../pages/__root';
import { Route as MainImport } from './../pages/_main';
import { Route as AuthImport } from './../pages/_auth';
import { Route as MainProjectsImport } from './../pages/_main/projects';
import { Route as MainAdminImport } from './../pages/_main/admin';
import { Route as MainProfileIndexImport } from './../pages/_main/profile/index';
import { Route as MainAdminUsersImport } from './../pages/_main/admin/users';
import { Route as MainAdminTemplatesImport } from './../pages/_main/admin/templates';
import { Route as MainAdminSettingsImport } from './../pages/_main/admin/settings';
import { Route as MainAdminSecurityImport } from './../pages/_main/admin/security';
import { Route as MainAdminPermissionsImport } from './../pages/_main/admin/permissions';
import { Route as MainAdminLogsImport } from './../pages/_main/admin/logs';
import { Route as AuthAuthRegistrationImport } from './../pages/_auth.auth/registration';
import { Route as AuthAuthRegisterImport } from './../pages/_auth.auth/register';
import { Route as AuthAuthRecoveryImport } from './../pages/_auth.auth/recovery';
import { Route as AuthAuthReactivationImport } from './../pages/_auth.auth/reactivation';
import { Route as MainProjectsGroupIndexImport } from './../pages/_main/projects/group/index';
import { Route as MainAdminUsersIndexImport } from './../pages/_main/admin/users/index';
import { Route as MainAdminTemplatesIndexImport } from './../pages/_main/admin/templates/index';
import { Route as MainProjectsProjectProjectIdImport } from './../pages/_main/projects/project.$projectId';
import { Route as MainAdminUsersUserIdImport } from './../pages/_main/admin/users/$userId';
import { Route as MainAdminPermissionsPImport } from './../pages/_main/admin/permissions/_p';
import { Route as AuthAuthResetPasswordResetPasswordImport } from './../pages/_auth.auth/_reset-password/reset-password';
import { Route as AuthAuthLoginLoginImport } from './../pages/_auth.auth/_login/login';
import { Route as MainProjectsGroupGroupIdIndexImport } from './../pages/_main/projects/group/$groupId.index';
import { Route as MainAdminPermissionsPIndexImport } from './../pages/_main/admin/permissions/_p.index';
import { Route as MainProjectsProjectProjectIdTasksImport } from './../pages/_main/projects/project.$projectId/tasks';
import { Route as MainProjectsProjectProjectIdTablesImport } from './../pages/_main/projects/project.$projectId/tables';
import { Route as MainProjectsProjectProjectIdSolversImport } from './../pages/_main/projects/project.$projectId/solvers';
import { Route as MainProjectsProjectProjectIdSettingsImport } from './../pages/_main/projects/project.$projectId/settings';
import { Route as MainProjectsProjectProjectIdReportsImport } from './../pages/_main/projects/project.$projectId/reports';
import { Route as MainProjectsProjectProjectIdParticipantsImport } from './../pages/_main/projects/project.$projectId/participants';
import { Route as MainProjectsProjectProjectIdFormsImport } from './../pages/_main/projects/project.$projectId/forms';
import { Route as MainProjectsProjectProjectIdEventsImport } from './../pages/_main/projects/project.$projectId/events';
import { Route as MainProjectsGroupGroupIdParticipantsImport } from './../pages/_main/projects/group/$groupId.participants';
import { Route as MainAdminTemplatesTemplateIdEditImport } from './../pages/_main/admin/templates/$templateId.edit';
import { Route as MainAdminPermissionsPRolesImport } from './../pages/_main/admin/permissions/_p.roles';
import { Route as MainProjectsProjectProjectIdFormsIndexImport } from './../pages/_main/projects/project.$projectId/forms/index';
import { Route as MainProjectsProjectProjectIdFormsAddImport } from './../pages/_main/projects/project.$projectId/forms/add';
import { Route as MainProjectsProjectProjectIdTablesTableIdIndexImport } from './../pages/_main/projects/project.$projectId/tables.$tableId/index';
import { Route as MainProjectsProjectProjectIdTablesTableIdStructureImport } from './../pages/_main/projects/project.$projectId/tables.$tableId/structure';
import { Route as MainProjectsProjectProjectIdTablesTableIdChecksImport } from './../pages/_main/projects/project.$projectId/tables.$tableId/checks';
import { Route as MainProjectsProjectProjectIdFormsFormIdEditImport } from './../pages/_main/projects/project.$projectId/forms/$formId.edit';

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const MainProjectsRoute = MainProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => MainRoute,
} as any);

const MainAdminRoute = MainAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => MainRoute,
} as any);

const MainProfileIndexRoute = MainProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => MainRoute,
} as any);

const MainAdminUsersRoute = MainAdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => MainAdminRoute,
} as any);

const MainAdminTemplatesRoute = MainAdminTemplatesImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => MainAdminRoute,
} as any);

const MainAdminSettingsRoute = MainAdminSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => MainAdminRoute,
} as any);

const MainAdminSecurityRoute = MainAdminSecurityImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => MainAdminRoute,
} as any);

const MainAdminPermissionsRoute = MainAdminPermissionsImport.update({
  id: '/permissions',
  path: '/permissions',
  getParentRoute: () => MainAdminRoute,
} as any);

const MainAdminLogsRoute = MainAdminLogsImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => MainAdminRoute,
} as any);

const AuthAuthRegistrationRoute = AuthAuthRegistrationImport.update({
  id: '/auth/registration',
  path: '/auth/registration',
  getParentRoute: () => AuthRoute,
} as any);

const AuthAuthRegisterRoute = AuthAuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => AuthRoute,
} as any);

const AuthAuthRecoveryRoute = AuthAuthRecoveryImport.update({
  id: '/auth/recovery',
  path: '/auth/recovery',
  getParentRoute: () => AuthRoute,
} as any);

const AuthAuthReactivationRoute = AuthAuthReactivationImport.update({
  id: '/auth/reactivation',
  path: '/auth/reactivation',
  getParentRoute: () => AuthRoute,
} as any);

const MainProjectsGroupIndexRoute = MainProjectsGroupIndexImport.update({
  id: '/group/',
  path: '/group/',
  getParentRoute: () => MainProjectsRoute,
} as any);

const MainAdminUsersIndexRoute = MainAdminUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainAdminUsersRoute,
} as any);

const MainAdminTemplatesIndexRoute = MainAdminTemplatesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainAdminTemplatesRoute,
} as any);

const MainProjectsProjectProjectIdRoute =
  MainProjectsProjectProjectIdImport.update({
    id: '/project/$projectId',
    path: '/project/$projectId',
    getParentRoute: () => MainProjectsRoute,
  } as any);

const MainAdminUsersUserIdRoute = MainAdminUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => MainAdminUsersRoute,
} as any);

const MainAdminPermissionsPRoute = MainAdminPermissionsPImport.update({
  id: '/_p',
  getParentRoute: () => MainAdminPermissionsRoute,
} as any);

const AuthAuthResetPasswordResetPasswordRoute =
  AuthAuthResetPasswordResetPasswordImport.update({
    id: '/auth/_reset-password/reset-password',
    path: '/auth/reset-password',
    getParentRoute: () => AuthRoute,
  } as any);

const AuthAuthLoginLoginRoute = AuthAuthLoginLoginImport.update({
  id: '/auth/_login/login',
  path: '/auth/login',
  getParentRoute: () => AuthRoute,
} as any);

const MainProjectsGroupGroupIdIndexRoute =
  MainProjectsGroupGroupIdIndexImport.update({
    id: '/group/$groupId/',
    path: '/group/$groupId/',
    getParentRoute: () => MainProjectsRoute,
  } as any);

const MainAdminPermissionsPIndexRoute = MainAdminPermissionsPIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => MainAdminPermissionsPRoute,
  } as any,
);

const MainProjectsProjectProjectIdTasksRoute =
  MainProjectsProjectProjectIdTasksImport.update({
    id: '/tasks',
    path: '/tasks',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdTablesRoute =
  MainProjectsProjectProjectIdTablesImport.update({
    id: '/tables',
    path: '/tables',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdSolversRoute =
  MainProjectsProjectProjectIdSolversImport.update({
    id: '/solvers',
    path: '/solvers',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdSettingsRoute =
  MainProjectsProjectProjectIdSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdReportsRoute =
  MainProjectsProjectProjectIdReportsImport.update({
    id: '/reports',
    path: '/reports',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdParticipantsRoute =
  MainProjectsProjectProjectIdParticipantsImport.update({
    id: '/participants',
    path: '/participants',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdFormsRoute =
  MainProjectsProjectProjectIdFormsImport.update({
    id: '/forms',
    path: '/forms',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsProjectProjectIdEventsRoute =
  MainProjectsProjectProjectIdEventsImport.update({
    id: '/events',
    path: '/events',
    getParentRoute: () => MainProjectsProjectProjectIdRoute,
  } as any);

const MainProjectsGroupGroupIdParticipantsRoute =
  MainProjectsGroupGroupIdParticipantsImport.update({
    id: '/group/$groupId/participants',
    path: '/group/$groupId/participants',
    getParentRoute: () => MainProjectsRoute,
  } as any);

const MainAdminTemplatesTemplateIdEditRoute =
  MainAdminTemplatesTemplateIdEditImport.update({
    id: '/$templateId/edit',
    path: '/$templateId/edit',
    getParentRoute: () => MainAdminTemplatesRoute,
  } as any);

const MainAdminPermissionsPRolesRoute = MainAdminPermissionsPRolesImport.update(
  {
    id: '/roles',
    path: '/roles',
    getParentRoute: () => MainAdminPermissionsPRoute,
  } as any,
);

const MainProjectsProjectProjectIdFormsIndexRoute =
  MainProjectsProjectProjectIdFormsIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainProjectsProjectProjectIdFormsRoute,
  } as any);

const MainProjectsProjectProjectIdFormsAddRoute =
  MainProjectsProjectProjectIdFormsAddImport.update({
    id: '/add',
    path: '/add',
    getParentRoute: () => MainProjectsProjectProjectIdFormsRoute,
  } as any);

const MainProjectsProjectProjectIdTablesTableIdIndexRoute =
  MainProjectsProjectProjectIdTablesTableIdIndexImport.update({
    id: '/$tableId/',
    path: '/$tableId/',
    getParentRoute: () => MainProjectsProjectProjectIdTablesRoute,
  } as any);

const MainProjectsProjectProjectIdTablesTableIdStructureRoute =
  MainProjectsProjectProjectIdTablesTableIdStructureImport.update({
    id: '/$tableId/structure',
    path: '/$tableId/structure',
    getParentRoute: () => MainProjectsProjectProjectIdTablesRoute,
  } as any);

const MainProjectsProjectProjectIdTablesTableIdChecksRoute =
  MainProjectsProjectProjectIdTablesTableIdChecksImport.update({
    id: '/$tableId/checks',
    path: '/$tableId/checks',
    getParentRoute: () => MainProjectsProjectProjectIdTablesRoute,
  } as any);

const MainProjectsProjectProjectIdFormsFormIdEditRoute =
  MainProjectsProjectProjectIdFormsFormIdEditImport.update({
    id: '/$formId/edit',
    path: '/$formId/edit',
    getParentRoute: () => MainProjectsProjectProjectIdFormsRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/_main': {
      id: '/_main';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof MainImport;
      parentRoute: typeof rootRoute;
    };
    '/_main/admin': {
      id: '/_main/admin';
      path: '/admin';
      fullPath: '/admin';
      preLoaderRoute: typeof MainAdminImport;
      parentRoute: typeof MainImport;
    };
    '/_main/projects': {
      id: '/_main/projects';
      path: '/projects';
      fullPath: '/projects';
      preLoaderRoute: typeof MainProjectsImport;
      parentRoute: typeof MainImport;
    };
    '/_auth/auth/reactivation': {
      id: '/_auth/auth/reactivation';
      path: '/auth/reactivation';
      fullPath: '/auth/reactivation';
      preLoaderRoute: typeof AuthAuthReactivationImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/auth/recovery': {
      id: '/_auth/auth/recovery';
      path: '/auth/recovery';
      fullPath: '/auth/recovery';
      preLoaderRoute: typeof AuthAuthRecoveryImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/auth/register': {
      id: '/_auth/auth/register';
      path: '/auth/register';
      fullPath: '/auth/register';
      preLoaderRoute: typeof AuthAuthRegisterImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/auth/registration': {
      id: '/_auth/auth/registration';
      path: '/auth/registration';
      fullPath: '/auth/registration';
      preLoaderRoute: typeof AuthAuthRegistrationImport;
      parentRoute: typeof AuthImport;
    };
    '/_main/admin/logs': {
      id: '/_main/admin/logs';
      path: '/logs';
      fullPath: '/admin/logs';
      preLoaderRoute: typeof MainAdminLogsImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/admin/permissions': {
      id: '/_main/admin/permissions';
      path: '/permissions';
      fullPath: '/admin/permissions';
      preLoaderRoute: typeof MainAdminPermissionsImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/admin/security': {
      id: '/_main/admin/security';
      path: '/security';
      fullPath: '/admin/security';
      preLoaderRoute: typeof MainAdminSecurityImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/admin/settings': {
      id: '/_main/admin/settings';
      path: '/settings';
      fullPath: '/admin/settings';
      preLoaderRoute: typeof MainAdminSettingsImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/admin/templates': {
      id: '/_main/admin/templates';
      path: '/templates';
      fullPath: '/admin/templates';
      preLoaderRoute: typeof MainAdminTemplatesImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/admin/users': {
      id: '/_main/admin/users';
      path: '/users';
      fullPath: '/admin/users';
      preLoaderRoute: typeof MainAdminUsersImport;
      parentRoute: typeof MainAdminImport;
    };
    '/_main/profile/': {
      id: '/_main/profile/';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof MainProfileIndexImport;
      parentRoute: typeof MainImport;
    };
    '/_auth/auth/_login/login': {
      id: '/_auth/auth/_login/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthAuthLoginLoginImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/auth/_reset-password/reset-password': {
      id: '/_auth/auth/_reset-password/reset-password';
      path: '/auth/reset-password';
      fullPath: '/auth/reset-password';
      preLoaderRoute: typeof AuthAuthResetPasswordResetPasswordImport;
      parentRoute: typeof AuthImport;
    };
    '/_main/admin/permissions/_p': {
      id: '/_main/admin/permissions/_p';
      path: '';
      fullPath: '/admin/permissions';
      preLoaderRoute: typeof MainAdminPermissionsPImport;
      parentRoute: typeof MainAdminPermissionsImport;
    };
    '/_main/admin/users/$userId': {
      id: '/_main/admin/users/$userId';
      path: '/$userId';
      fullPath: '/admin/users/$userId';
      preLoaderRoute: typeof MainAdminUsersUserIdImport;
      parentRoute: typeof MainAdminUsersImport;
    };
    '/_main/projects/project/$projectId': {
      id: '/_main/projects/project/$projectId';
      path: '/project/$projectId';
      fullPath: '/projects/project/$projectId';
      preLoaderRoute: typeof MainProjectsProjectProjectIdImport;
      parentRoute: typeof MainProjectsImport;
    };
    '/_main/admin/templates/': {
      id: '/_main/admin/templates/';
      path: '/';
      fullPath: '/admin/templates/';
      preLoaderRoute: typeof MainAdminTemplatesIndexImport;
      parentRoute: typeof MainAdminTemplatesImport;
    };
    '/_main/admin/users/': {
      id: '/_main/admin/users/';
      path: '/';
      fullPath: '/admin/users/';
      preLoaderRoute: typeof MainAdminUsersIndexImport;
      parentRoute: typeof MainAdminUsersImport;
    };
    '/_main/projects/group/': {
      id: '/_main/projects/group/';
      path: '/group';
      fullPath: '/projects/group';
      preLoaderRoute: typeof MainProjectsGroupIndexImport;
      parentRoute: typeof MainProjectsImport;
    };
    '/_main/admin/permissions/_p/roles': {
      id: '/_main/admin/permissions/_p/roles';
      path: '/roles';
      fullPath: '/admin/permissions/roles';
      preLoaderRoute: typeof MainAdminPermissionsPRolesImport;
      parentRoute: typeof MainAdminPermissionsPImport;
    };
    '/_main/admin/templates/$templateId/edit': {
      id: '/_main/admin/templates/$templateId/edit';
      path: '/$templateId/edit';
      fullPath: '/admin/templates/$templateId/edit';
      preLoaderRoute: typeof MainAdminTemplatesTemplateIdEditImport;
      parentRoute: typeof MainAdminTemplatesImport;
    };
    '/_main/projects/group/$groupId/participants': {
      id: '/_main/projects/group/$groupId/participants';
      path: '/group/$groupId/participants';
      fullPath: '/projects/group/$groupId/participants';
      preLoaderRoute: typeof MainProjectsGroupGroupIdParticipantsImport;
      parentRoute: typeof MainProjectsImport;
    };
    '/_main/projects/project/$projectId/events': {
      id: '/_main/projects/project/$projectId/events';
      path: '/events';
      fullPath: '/projects/project/$projectId/events';
      preLoaderRoute: typeof MainProjectsProjectProjectIdEventsImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/forms': {
      id: '/_main/projects/project/$projectId/forms';
      path: '/forms';
      fullPath: '/projects/project/$projectId/forms';
      preLoaderRoute: typeof MainProjectsProjectProjectIdFormsImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/participants': {
      id: '/_main/projects/project/$projectId/participants';
      path: '/participants';
      fullPath: '/projects/project/$projectId/participants';
      preLoaderRoute: typeof MainProjectsProjectProjectIdParticipantsImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/reports': {
      id: '/_main/projects/project/$projectId/reports';
      path: '/reports';
      fullPath: '/projects/project/$projectId/reports';
      preLoaderRoute: typeof MainProjectsProjectProjectIdReportsImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/settings': {
      id: '/_main/projects/project/$projectId/settings';
      path: '/settings';
      fullPath: '/projects/project/$projectId/settings';
      preLoaderRoute: typeof MainProjectsProjectProjectIdSettingsImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/solvers': {
      id: '/_main/projects/project/$projectId/solvers';
      path: '/solvers';
      fullPath: '/projects/project/$projectId/solvers';
      preLoaderRoute: typeof MainProjectsProjectProjectIdSolversImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/tables': {
      id: '/_main/projects/project/$projectId/tables';
      path: '/tables';
      fullPath: '/projects/project/$projectId/tables';
      preLoaderRoute: typeof MainProjectsProjectProjectIdTablesImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/projects/project/$projectId/tasks': {
      id: '/_main/projects/project/$projectId/tasks';
      path: '/tasks';
      fullPath: '/projects/project/$projectId/tasks';
      preLoaderRoute: typeof MainProjectsProjectProjectIdTasksImport;
      parentRoute: typeof MainProjectsProjectProjectIdImport;
    };
    '/_main/admin/permissions/_p/': {
      id: '/_main/admin/permissions/_p/';
      path: '/';
      fullPath: '/admin/permissions/';
      preLoaderRoute: typeof MainAdminPermissionsPIndexImport;
      parentRoute: typeof MainAdminPermissionsPImport;
    };
    '/_main/projects/group/$groupId/': {
      id: '/_main/projects/group/$groupId/';
      path: '/group/$groupId';
      fullPath: '/projects/group/$groupId';
      preLoaderRoute: typeof MainProjectsGroupGroupIdIndexImport;
      parentRoute: typeof MainProjectsImport;
    };
    '/_main/projects/project/$projectId/forms/add': {
      id: '/_main/projects/project/$projectId/forms/add';
      path: '/add';
      fullPath: '/projects/project/$projectId/forms/add';
      preLoaderRoute: typeof MainProjectsProjectProjectIdFormsAddImport;
      parentRoute: typeof MainProjectsProjectProjectIdFormsImport;
    };
    '/_main/projects/project/$projectId/forms/': {
      id: '/_main/projects/project/$projectId/forms/';
      path: '/';
      fullPath: '/projects/project/$projectId/forms/';
      preLoaderRoute: typeof MainProjectsProjectProjectIdFormsIndexImport;
      parentRoute: typeof MainProjectsProjectProjectIdFormsImport;
    };
    '/_main/projects/project/$projectId/forms/$formId/edit': {
      id: '/_main/projects/project/$projectId/forms/$formId/edit';
      path: '/$formId/edit';
      fullPath: '/projects/project/$projectId/forms/$formId/edit';
      preLoaderRoute: typeof MainProjectsProjectProjectIdFormsFormIdEditImport;
      parentRoute: typeof MainProjectsProjectProjectIdFormsImport;
    };
    '/_main/projects/project/$projectId/tables/$tableId/checks': {
      id: '/_main/projects/project/$projectId/tables/$tableId/checks';
      path: '/$tableId/checks';
      fullPath: '/projects/project/$projectId/tables/$tableId/checks';
      preLoaderRoute: typeof MainProjectsProjectProjectIdTablesTableIdChecksImport;
      parentRoute: typeof MainProjectsProjectProjectIdTablesImport;
    };
    '/_main/projects/project/$projectId/tables/$tableId/structure': {
      id: '/_main/projects/project/$projectId/tables/$tableId/structure';
      path: '/$tableId/structure';
      fullPath: '/projects/project/$projectId/tables/$tableId/structure';
      preLoaderRoute: typeof MainProjectsProjectProjectIdTablesTableIdStructureImport;
      parentRoute: typeof MainProjectsProjectProjectIdTablesImport;
    };
    '/_main/projects/project/$projectId/tables/$tableId/': {
      id: '/_main/projects/project/$projectId/tables/$tableId/';
      path: '/$tableId';
      fullPath: '/projects/project/$projectId/tables/$tableId';
      preLoaderRoute: typeof MainProjectsProjectProjectIdTablesTableIdIndexImport;
      parentRoute: typeof MainProjectsProjectProjectIdTablesImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAuthReactivationRoute: typeof AuthAuthReactivationRoute;
  AuthAuthRecoveryRoute: typeof AuthAuthRecoveryRoute;
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute;
  AuthAuthRegistrationRoute: typeof AuthAuthRegistrationRoute;
  AuthAuthLoginLoginRoute: typeof AuthAuthLoginLoginRoute;
  AuthAuthResetPasswordResetPasswordRoute: typeof AuthAuthResetPasswordResetPasswordRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthReactivationRoute: AuthAuthReactivationRoute,
  AuthAuthRecoveryRoute: AuthAuthRecoveryRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
  AuthAuthRegistrationRoute: AuthAuthRegistrationRoute,
  AuthAuthLoginLoginRoute: AuthAuthLoginLoginRoute,
  AuthAuthResetPasswordResetPasswordRoute:
    AuthAuthResetPasswordResetPasswordRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

interface MainAdminPermissionsPRouteChildren {
  MainAdminPermissionsPRolesRoute: typeof MainAdminPermissionsPRolesRoute;
  MainAdminPermissionsPIndexRoute: typeof MainAdminPermissionsPIndexRoute;
}

const MainAdminPermissionsPRouteChildren: MainAdminPermissionsPRouteChildren = {
  MainAdminPermissionsPRolesRoute: MainAdminPermissionsPRolesRoute,
  MainAdminPermissionsPIndexRoute: MainAdminPermissionsPIndexRoute,
};

const MainAdminPermissionsPRouteWithChildren =
  MainAdminPermissionsPRoute._addFileChildren(
    MainAdminPermissionsPRouteChildren,
  );

interface MainAdminPermissionsRouteChildren {
  MainAdminPermissionsPRoute: typeof MainAdminPermissionsPRouteWithChildren;
}

const MainAdminPermissionsRouteChildren: MainAdminPermissionsRouteChildren = {
  MainAdminPermissionsPRoute: MainAdminPermissionsPRouteWithChildren,
};

const MainAdminPermissionsRouteWithChildren =
  MainAdminPermissionsRoute._addFileChildren(MainAdminPermissionsRouteChildren);

interface MainAdminTemplatesRouteChildren {
  MainAdminTemplatesIndexRoute: typeof MainAdminTemplatesIndexRoute;
  MainAdminTemplatesTemplateIdEditRoute: typeof MainAdminTemplatesTemplateIdEditRoute;
}

const MainAdminTemplatesRouteChildren: MainAdminTemplatesRouteChildren = {
  MainAdminTemplatesIndexRoute: MainAdminTemplatesIndexRoute,
  MainAdminTemplatesTemplateIdEditRoute: MainAdminTemplatesTemplateIdEditRoute,
};

const MainAdminTemplatesRouteWithChildren =
  MainAdminTemplatesRoute._addFileChildren(MainAdminTemplatesRouteChildren);

interface MainAdminUsersRouteChildren {
  MainAdminUsersUserIdRoute: typeof MainAdminUsersUserIdRoute;
  MainAdminUsersIndexRoute: typeof MainAdminUsersIndexRoute;
}

const MainAdminUsersRouteChildren: MainAdminUsersRouteChildren = {
  MainAdminUsersUserIdRoute: MainAdminUsersUserIdRoute,
  MainAdminUsersIndexRoute: MainAdminUsersIndexRoute,
};

const MainAdminUsersRouteWithChildren = MainAdminUsersRoute._addFileChildren(
  MainAdminUsersRouteChildren,
);

interface MainAdminRouteChildren {
  MainAdminLogsRoute: typeof MainAdminLogsRoute;
  MainAdminPermissionsRoute: typeof MainAdminPermissionsRouteWithChildren;
  MainAdminSecurityRoute: typeof MainAdminSecurityRoute;
  MainAdminSettingsRoute: typeof MainAdminSettingsRoute;
  MainAdminTemplatesRoute: typeof MainAdminTemplatesRouteWithChildren;
  MainAdminUsersRoute: typeof MainAdminUsersRouteWithChildren;
}

const MainAdminRouteChildren: MainAdminRouteChildren = {
  MainAdminLogsRoute: MainAdminLogsRoute,
  MainAdminPermissionsRoute: MainAdminPermissionsRouteWithChildren,
  MainAdminSecurityRoute: MainAdminSecurityRoute,
  MainAdminSettingsRoute: MainAdminSettingsRoute,
  MainAdminTemplatesRoute: MainAdminTemplatesRouteWithChildren,
  MainAdminUsersRoute: MainAdminUsersRouteWithChildren,
};

const MainAdminRouteWithChildren = MainAdminRoute._addFileChildren(
  MainAdminRouteChildren,
);

interface MainProjectsProjectProjectIdFormsRouteChildren {
  MainProjectsProjectProjectIdFormsAddRoute: typeof MainProjectsProjectProjectIdFormsAddRoute;
  MainProjectsProjectProjectIdFormsIndexRoute: typeof MainProjectsProjectProjectIdFormsIndexRoute;
  MainProjectsProjectProjectIdFormsFormIdEditRoute: typeof MainProjectsProjectProjectIdFormsFormIdEditRoute;
}

const MainProjectsProjectProjectIdFormsRouteChildren: MainProjectsProjectProjectIdFormsRouteChildren =
  {
    MainProjectsProjectProjectIdFormsAddRoute:
      MainProjectsProjectProjectIdFormsAddRoute,
    MainProjectsProjectProjectIdFormsIndexRoute:
      MainProjectsProjectProjectIdFormsIndexRoute,
    MainProjectsProjectProjectIdFormsFormIdEditRoute:
      MainProjectsProjectProjectIdFormsFormIdEditRoute,
  };

const MainProjectsProjectProjectIdFormsRouteWithChildren =
  MainProjectsProjectProjectIdFormsRoute._addFileChildren(
    MainProjectsProjectProjectIdFormsRouteChildren,
  );

interface MainProjectsProjectProjectIdTablesRouteChildren {
  MainProjectsProjectProjectIdTablesTableIdChecksRoute: typeof MainProjectsProjectProjectIdTablesTableIdChecksRoute;
  MainProjectsProjectProjectIdTablesTableIdStructureRoute: typeof MainProjectsProjectProjectIdTablesTableIdStructureRoute;
  MainProjectsProjectProjectIdTablesTableIdIndexRoute: typeof MainProjectsProjectProjectIdTablesTableIdIndexRoute;
}

const MainProjectsProjectProjectIdTablesRouteChildren: MainProjectsProjectProjectIdTablesRouteChildren =
  {
    MainProjectsProjectProjectIdTablesTableIdChecksRoute:
      MainProjectsProjectProjectIdTablesTableIdChecksRoute,
    MainProjectsProjectProjectIdTablesTableIdStructureRoute:
      MainProjectsProjectProjectIdTablesTableIdStructureRoute,
    MainProjectsProjectProjectIdTablesTableIdIndexRoute:
      MainProjectsProjectProjectIdTablesTableIdIndexRoute,
  };

const MainProjectsProjectProjectIdTablesRouteWithChildren =
  MainProjectsProjectProjectIdTablesRoute._addFileChildren(
    MainProjectsProjectProjectIdTablesRouteChildren,
  );

interface MainProjectsProjectProjectIdRouteChildren {
  MainProjectsProjectProjectIdEventsRoute: typeof MainProjectsProjectProjectIdEventsRoute;
  MainProjectsProjectProjectIdFormsRoute: typeof MainProjectsProjectProjectIdFormsRouteWithChildren;
  MainProjectsProjectProjectIdParticipantsRoute: typeof MainProjectsProjectProjectIdParticipantsRoute;
  MainProjectsProjectProjectIdReportsRoute: typeof MainProjectsProjectProjectIdReportsRoute;
  MainProjectsProjectProjectIdSettingsRoute: typeof MainProjectsProjectProjectIdSettingsRoute;
  MainProjectsProjectProjectIdSolversRoute: typeof MainProjectsProjectProjectIdSolversRoute;
  MainProjectsProjectProjectIdTablesRoute: typeof MainProjectsProjectProjectIdTablesRouteWithChildren;
  MainProjectsProjectProjectIdTasksRoute: typeof MainProjectsProjectProjectIdTasksRoute;
}

const MainProjectsProjectProjectIdRouteChildren: MainProjectsProjectProjectIdRouteChildren =
  {
    MainProjectsProjectProjectIdEventsRoute:
      MainProjectsProjectProjectIdEventsRoute,
    MainProjectsProjectProjectIdFormsRoute:
      MainProjectsProjectProjectIdFormsRouteWithChildren,
    MainProjectsProjectProjectIdParticipantsRoute:
      MainProjectsProjectProjectIdParticipantsRoute,
    MainProjectsProjectProjectIdReportsRoute:
      MainProjectsProjectProjectIdReportsRoute,
    MainProjectsProjectProjectIdSettingsRoute:
      MainProjectsProjectProjectIdSettingsRoute,
    MainProjectsProjectProjectIdSolversRoute:
      MainProjectsProjectProjectIdSolversRoute,
    MainProjectsProjectProjectIdTablesRoute:
      MainProjectsProjectProjectIdTablesRouteWithChildren,
    MainProjectsProjectProjectIdTasksRoute:
      MainProjectsProjectProjectIdTasksRoute,
  };

const MainProjectsProjectProjectIdRouteWithChildren =
  MainProjectsProjectProjectIdRoute._addFileChildren(
    MainProjectsProjectProjectIdRouteChildren,
  );

interface MainProjectsRouteChildren {
  MainProjectsProjectProjectIdRoute: typeof MainProjectsProjectProjectIdRouteWithChildren;
  MainProjectsGroupIndexRoute: typeof MainProjectsGroupIndexRoute;
  MainProjectsGroupGroupIdParticipantsRoute: typeof MainProjectsGroupGroupIdParticipantsRoute;
  MainProjectsGroupGroupIdIndexRoute: typeof MainProjectsGroupGroupIdIndexRoute;
}

const MainProjectsRouteChildren: MainProjectsRouteChildren = {
  MainProjectsProjectProjectIdRoute:
    MainProjectsProjectProjectIdRouteWithChildren,
  MainProjectsGroupIndexRoute: MainProjectsGroupIndexRoute,
  MainProjectsGroupGroupIdParticipantsRoute:
    MainProjectsGroupGroupIdParticipantsRoute,
  MainProjectsGroupGroupIdIndexRoute: MainProjectsGroupGroupIdIndexRoute,
};

const MainProjectsRouteWithChildren = MainProjectsRoute._addFileChildren(
  MainProjectsRouteChildren,
);

interface MainRouteChildren {
  MainAdminRoute: typeof MainAdminRouteWithChildren;
  MainProjectsRoute: typeof MainProjectsRouteWithChildren;
  MainProfileIndexRoute: typeof MainProfileIndexRoute;
}

const MainRouteChildren: MainRouteChildren = {
  MainAdminRoute: MainAdminRouteWithChildren,
  MainProjectsRoute: MainProjectsRouteWithChildren,
  MainProfileIndexRoute: MainProfileIndexRoute,
};

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren;
  '/admin': typeof MainAdminRouteWithChildren;
  '/projects': typeof MainProjectsRouteWithChildren;
  '/auth/reactivation': typeof AuthAuthReactivationRoute;
  '/auth/recovery': typeof AuthAuthRecoveryRoute;
  '/auth/register': typeof AuthAuthRegisterRoute;
  '/auth/registration': typeof AuthAuthRegistrationRoute;
  '/admin/logs': typeof MainAdminLogsRoute;
  '/admin/permissions': typeof MainAdminPermissionsPRouteWithChildren;
  '/admin/security': typeof MainAdminSecurityRoute;
  '/admin/settings': typeof MainAdminSettingsRoute;
  '/admin/templates': typeof MainAdminTemplatesRouteWithChildren;
  '/admin/users': typeof MainAdminUsersRouteWithChildren;
  '/profile': typeof MainProfileIndexRoute;
  '/auth/login': typeof AuthAuthLoginLoginRoute;
  '/auth/reset-password': typeof AuthAuthResetPasswordResetPasswordRoute;
  '/admin/users/$userId': typeof MainAdminUsersUserIdRoute;
  '/projects/project/$projectId': typeof MainProjectsProjectProjectIdRouteWithChildren;
  '/admin/templates/': typeof MainAdminTemplatesIndexRoute;
  '/admin/users/': typeof MainAdminUsersIndexRoute;
  '/projects/group': typeof MainProjectsGroupIndexRoute;
  '/admin/permissions/roles': typeof MainAdminPermissionsPRolesRoute;
  '/admin/templates/$templateId/edit': typeof MainAdminTemplatesTemplateIdEditRoute;
  '/projects/group/$groupId/participants': typeof MainProjectsGroupGroupIdParticipantsRoute;
  '/projects/project/$projectId/events': typeof MainProjectsProjectProjectIdEventsRoute;
  '/projects/project/$projectId/forms': typeof MainProjectsProjectProjectIdFormsRouteWithChildren;
  '/projects/project/$projectId/participants': typeof MainProjectsProjectProjectIdParticipantsRoute;
  '/projects/project/$projectId/reports': typeof MainProjectsProjectProjectIdReportsRoute;
  '/projects/project/$projectId/settings': typeof MainProjectsProjectProjectIdSettingsRoute;
  '/projects/project/$projectId/solvers': typeof MainProjectsProjectProjectIdSolversRoute;
  '/projects/project/$projectId/tables': typeof MainProjectsProjectProjectIdTablesRouteWithChildren;
  '/projects/project/$projectId/tasks': typeof MainProjectsProjectProjectIdTasksRoute;
  '/admin/permissions/': typeof MainAdminPermissionsPIndexRoute;
  '/projects/group/$groupId': typeof MainProjectsGroupGroupIdIndexRoute;
  '/projects/project/$projectId/forms/add': typeof MainProjectsProjectProjectIdFormsAddRoute;
  '/projects/project/$projectId/forms/': typeof MainProjectsProjectProjectIdFormsIndexRoute;
  '/projects/project/$projectId/forms/$formId/edit': typeof MainProjectsProjectProjectIdFormsFormIdEditRoute;
  '/projects/project/$projectId/tables/$tableId/checks': typeof MainProjectsProjectProjectIdTablesTableIdChecksRoute;
  '/projects/project/$projectId/tables/$tableId/structure': typeof MainProjectsProjectProjectIdTablesTableIdStructureRoute;
  '/projects/project/$projectId/tables/$tableId': typeof MainProjectsProjectProjectIdTablesTableIdIndexRoute;
}

export interface FileRoutesByTo {
  '': typeof MainRouteWithChildren;
  '/admin': typeof MainAdminRouteWithChildren;
  '/projects': typeof MainProjectsRouteWithChildren;
  '/auth/reactivation': typeof AuthAuthReactivationRoute;
  '/auth/recovery': typeof AuthAuthRecoveryRoute;
  '/auth/register': typeof AuthAuthRegisterRoute;
  '/auth/registration': typeof AuthAuthRegistrationRoute;
  '/admin/logs': typeof MainAdminLogsRoute;
  '/admin/permissions': typeof MainAdminPermissionsPIndexRoute;
  '/admin/security': typeof MainAdminSecurityRoute;
  '/admin/settings': typeof MainAdminSettingsRoute;
  '/profile': typeof MainProfileIndexRoute;
  '/auth/login': typeof AuthAuthLoginLoginRoute;
  '/auth/reset-password': typeof AuthAuthResetPasswordResetPasswordRoute;
  '/admin/users/$userId': typeof MainAdminUsersUserIdRoute;
  '/projects/project/$projectId': typeof MainProjectsProjectProjectIdRouteWithChildren;
  '/admin/templates': typeof MainAdminTemplatesIndexRoute;
  '/admin/users': typeof MainAdminUsersIndexRoute;
  '/projects/group': typeof MainProjectsGroupIndexRoute;
  '/admin/permissions/roles': typeof MainAdminPermissionsPRolesRoute;
  '/admin/templates/$templateId/edit': typeof MainAdminTemplatesTemplateIdEditRoute;
  '/projects/group/$groupId/participants': typeof MainProjectsGroupGroupIdParticipantsRoute;
  '/projects/project/$projectId/events': typeof MainProjectsProjectProjectIdEventsRoute;
  '/projects/project/$projectId/participants': typeof MainProjectsProjectProjectIdParticipantsRoute;
  '/projects/project/$projectId/reports': typeof MainProjectsProjectProjectIdReportsRoute;
  '/projects/project/$projectId/settings': typeof MainProjectsProjectProjectIdSettingsRoute;
  '/projects/project/$projectId/solvers': typeof MainProjectsProjectProjectIdSolversRoute;
  '/projects/project/$projectId/tables': typeof MainProjectsProjectProjectIdTablesRouteWithChildren;
  '/projects/project/$projectId/tasks': typeof MainProjectsProjectProjectIdTasksRoute;
  '/projects/group/$groupId': typeof MainProjectsGroupGroupIdIndexRoute;
  '/projects/project/$projectId/forms/add': typeof MainProjectsProjectProjectIdFormsAddRoute;
  '/projects/project/$projectId/forms': typeof MainProjectsProjectProjectIdFormsIndexRoute;
  '/projects/project/$projectId/forms/$formId/edit': typeof MainProjectsProjectProjectIdFormsFormIdEditRoute;
  '/projects/project/$projectId/tables/$tableId/checks': typeof MainProjectsProjectProjectIdTablesTableIdChecksRoute;
  '/projects/project/$projectId/tables/$tableId/structure': typeof MainProjectsProjectProjectIdTablesTableIdStructureRoute;
  '/projects/project/$projectId/tables/$tableId': typeof MainProjectsProjectProjectIdTablesTableIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_main': typeof MainRouteWithChildren;
  '/_main/admin': typeof MainAdminRouteWithChildren;
  '/_main/projects': typeof MainProjectsRouteWithChildren;
  '/_auth/auth/reactivation': typeof AuthAuthReactivationRoute;
  '/_auth/auth/recovery': typeof AuthAuthRecoveryRoute;
  '/_auth/auth/register': typeof AuthAuthRegisterRoute;
  '/_auth/auth/registration': typeof AuthAuthRegistrationRoute;
  '/_main/admin/logs': typeof MainAdminLogsRoute;
  '/_main/admin/permissions': typeof MainAdminPermissionsRouteWithChildren;
  '/_main/admin/security': typeof MainAdminSecurityRoute;
  '/_main/admin/settings': typeof MainAdminSettingsRoute;
  '/_main/admin/templates': typeof MainAdminTemplatesRouteWithChildren;
  '/_main/admin/users': typeof MainAdminUsersRouteWithChildren;
  '/_main/profile/': typeof MainProfileIndexRoute;
  '/_auth/auth/_login/login': typeof AuthAuthLoginLoginRoute;
  '/_auth/auth/_reset-password/reset-password': typeof AuthAuthResetPasswordResetPasswordRoute;
  '/_main/admin/permissions/_p': typeof MainAdminPermissionsPRouteWithChildren;
  '/_main/admin/users/$userId': typeof MainAdminUsersUserIdRoute;
  '/_main/projects/project/$projectId': typeof MainProjectsProjectProjectIdRouteWithChildren;
  '/_main/admin/templates/': typeof MainAdminTemplatesIndexRoute;
  '/_main/admin/users/': typeof MainAdminUsersIndexRoute;
  '/_main/projects/group/': typeof MainProjectsGroupIndexRoute;
  '/_main/admin/permissions/_p/roles': typeof MainAdminPermissionsPRolesRoute;
  '/_main/admin/templates/$templateId/edit': typeof MainAdminTemplatesTemplateIdEditRoute;
  '/_main/projects/group/$groupId/participants': typeof MainProjectsGroupGroupIdParticipantsRoute;
  '/_main/projects/project/$projectId/events': typeof MainProjectsProjectProjectIdEventsRoute;
  '/_main/projects/project/$projectId/forms': typeof MainProjectsProjectProjectIdFormsRouteWithChildren;
  '/_main/projects/project/$projectId/participants': typeof MainProjectsProjectProjectIdParticipantsRoute;
  '/_main/projects/project/$projectId/reports': typeof MainProjectsProjectProjectIdReportsRoute;
  '/_main/projects/project/$projectId/settings': typeof MainProjectsProjectProjectIdSettingsRoute;
  '/_main/projects/project/$projectId/solvers': typeof MainProjectsProjectProjectIdSolversRoute;
  '/_main/projects/project/$projectId/tables': typeof MainProjectsProjectProjectIdTablesRouteWithChildren;
  '/_main/projects/project/$projectId/tasks': typeof MainProjectsProjectProjectIdTasksRoute;
  '/_main/admin/permissions/_p/': typeof MainAdminPermissionsPIndexRoute;
  '/_main/projects/group/$groupId/': typeof MainProjectsGroupGroupIdIndexRoute;
  '/_main/projects/project/$projectId/forms/add': typeof MainProjectsProjectProjectIdFormsAddRoute;
  '/_main/projects/project/$projectId/forms/': typeof MainProjectsProjectProjectIdFormsIndexRoute;
  '/_main/projects/project/$projectId/forms/$formId/edit': typeof MainProjectsProjectProjectIdFormsFormIdEditRoute;
  '/_main/projects/project/$projectId/tables/$tableId/checks': typeof MainProjectsProjectProjectIdTablesTableIdChecksRoute;
  '/_main/projects/project/$projectId/tables/$tableId/structure': typeof MainProjectsProjectProjectIdTablesTableIdStructureRoute;
  '/_main/projects/project/$projectId/tables/$tableId/': typeof MainProjectsProjectProjectIdTablesTableIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ''
    | '/admin'
    | '/projects'
    | '/auth/reactivation'
    | '/auth/recovery'
    | '/auth/register'
    | '/auth/registration'
    | '/admin/logs'
    | '/admin/permissions'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/templates'
    | '/admin/users'
    | '/profile'
    | '/auth/login'
    | '/auth/reset-password'
    | '/admin/users/$userId'
    | '/projects/project/$projectId'
    | '/admin/templates/'
    | '/admin/users/'
    | '/projects/group'
    | '/admin/permissions/roles'
    | '/admin/templates/$templateId/edit'
    | '/projects/group/$groupId/participants'
    | '/projects/project/$projectId/events'
    | '/projects/project/$projectId/forms'
    | '/projects/project/$projectId/participants'
    | '/projects/project/$projectId/reports'
    | '/projects/project/$projectId/settings'
    | '/projects/project/$projectId/solvers'
    | '/projects/project/$projectId/tables'
    | '/projects/project/$projectId/tasks'
    | '/admin/permissions/'
    | '/projects/group/$groupId'
    | '/projects/project/$projectId/forms/add'
    | '/projects/project/$projectId/forms/'
    | '/projects/project/$projectId/forms/$formId/edit'
    | '/projects/project/$projectId/tables/$tableId/checks'
    | '/projects/project/$projectId/tables/$tableId/structure'
    | '/projects/project/$projectId/tables/$tableId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ''
    | '/admin'
    | '/projects'
    | '/auth/reactivation'
    | '/auth/recovery'
    | '/auth/register'
    | '/auth/registration'
    | '/admin/logs'
    | '/admin/permissions'
    | '/admin/security'
    | '/admin/settings'
    | '/profile'
    | '/auth/login'
    | '/auth/reset-password'
    | '/admin/users/$userId'
    | '/projects/project/$projectId'
    | '/admin/templates'
    | '/admin/users'
    | '/projects/group'
    | '/admin/permissions/roles'
    | '/admin/templates/$templateId/edit'
    | '/projects/group/$groupId/participants'
    | '/projects/project/$projectId/events'
    | '/projects/project/$projectId/participants'
    | '/projects/project/$projectId/reports'
    | '/projects/project/$projectId/settings'
    | '/projects/project/$projectId/solvers'
    | '/projects/project/$projectId/tables'
    | '/projects/project/$projectId/tasks'
    | '/projects/group/$groupId'
    | '/projects/project/$projectId/forms/add'
    | '/projects/project/$projectId/forms'
    | '/projects/project/$projectId/forms/$formId/edit'
    | '/projects/project/$projectId/tables/$tableId/checks'
    | '/projects/project/$projectId/tables/$tableId/structure'
    | '/projects/project/$projectId/tables/$tableId';
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/_main/admin'
    | '/_main/projects'
    | '/_auth/auth/reactivation'
    | '/_auth/auth/recovery'
    | '/_auth/auth/register'
    | '/_auth/auth/registration'
    | '/_main/admin/logs'
    | '/_main/admin/permissions'
    | '/_main/admin/security'
    | '/_main/admin/settings'
    | '/_main/admin/templates'
    | '/_main/admin/users'
    | '/_main/profile/'
    | '/_auth/auth/_login/login'
    | '/_auth/auth/_reset-password/reset-password'
    | '/_main/admin/permissions/_p'
    | '/_main/admin/users/$userId'
    | '/_main/projects/project/$projectId'
    | '/_main/admin/templates/'
    | '/_main/admin/users/'
    | '/_main/projects/group/'
    | '/_main/admin/permissions/_p/roles'
    | '/_main/admin/templates/$templateId/edit'
    | '/_main/projects/group/$groupId/participants'
    | '/_main/projects/project/$projectId/events'
    | '/_main/projects/project/$projectId/forms'
    | '/_main/projects/project/$projectId/participants'
    | '/_main/projects/project/$projectId/reports'
    | '/_main/projects/project/$projectId/settings'
    | '/_main/projects/project/$projectId/solvers'
    | '/_main/projects/project/$projectId/tables'
    | '/_main/projects/project/$projectId/tasks'
    | '/_main/admin/permissions/_p/'
    | '/_main/projects/group/$groupId/'
    | '/_main/projects/project/$projectId/forms/add'
    | '/_main/projects/project/$projectId/forms/'
    | '/_main/projects/project/$projectId/forms/$formId/edit'
    | '/_main/projects/project/$projectId/tables/$tableId/checks'
    | '/_main/projects/project/$projectId/tables/$tableId/structure'
    | '/_main/projects/project/$projectId/tables/$tableId/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  MainRoute: typeof MainRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/auth/reactivation",
        "/_auth/auth/recovery",
        "/_auth/auth/register",
        "/_auth/auth/registration",
        "/_auth/auth/_login/login",
        "/_auth/auth/_reset-password/reset-password"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/admin",
        "/_main/projects",
        "/_main/profile/"
      ]
    },
    "/_main/admin": {
      "filePath": "_main/admin.tsx",
      "parent": "/_main",
      "children": [
        "/_main/admin/logs",
        "/_main/admin/permissions",
        "/_main/admin/security",
        "/_main/admin/settings",
        "/_main/admin/templates",
        "/_main/admin/users"
      ]
    },
    "/_main/projects": {
      "filePath": "_main/projects.tsx",
      "parent": "/_main",
      "children": [
        "/_main/projects/project/$projectId",
        "/_main/projects/group/",
        "/_main/projects/group/$groupId/participants",
        "/_main/projects/group/$groupId/"
      ]
    },
    "/_auth/auth/reactivation": {
      "filePath": "_auth.auth/reactivation.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/recovery": {
      "filePath": "_auth.auth/recovery.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/register": {
      "filePath": "_auth.auth/register.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/registration": {
      "filePath": "_auth.auth/registration.tsx",
      "parent": "/_auth"
    },
    "/_main/admin/logs": {
      "filePath": "_main/admin/logs.tsx",
      "parent": "/_main/admin"
    },
    "/_main/admin/permissions": {
      "filePath": "_main/admin/permissions.tsx",
      "parent": "/_main/admin",
      "children": [
        "/_main/admin/permissions/_p"
      ]
    },
    "/_main/admin/security": {
      "filePath": "_main/admin/security.tsx",
      "parent": "/_main/admin"
    },
    "/_main/admin/settings": {
      "filePath": "_main/admin/settings.tsx",
      "parent": "/_main/admin"
    },
    "/_main/admin/templates": {
      "filePath": "_main/admin/templates.tsx",
      "parent": "/_main/admin",
      "children": [
        "/_main/admin/templates/",
        "/_main/admin/templates/$templateId/edit"
      ]
    },
    "/_main/admin/users": {
      "filePath": "_main/admin/users.tsx",
      "parent": "/_main/admin",
      "children": [
        "/_main/admin/users/$userId",
        "/_main/admin/users/"
      ]
    },
    "/_main/profile/": {
      "filePath": "_main/profile/index.tsx",
      "parent": "/_main"
    },
    "/_auth/auth/_login/login": {
      "filePath": "_auth.auth/_login/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/auth/_reset-password/reset-password": {
      "filePath": "_auth.auth/_reset-password/reset-password.tsx",
      "parent": "/_auth"
    },
    "/_main/admin/permissions/_p": {
      "filePath": "_main/admin/permissions/_p.tsx",
      "parent": "/_main/admin/permissions",
      "children": [
        "/_main/admin/permissions/_p/roles",
        "/_main/admin/permissions/_p/"
      ]
    },
    "/_main/admin/users/$userId": {
      "filePath": "_main/admin/users/$userId.tsx",
      "parent": "/_main/admin/users"
    },
    "/_main/projects/project/$projectId": {
      "filePath": "_main/projects/project.$projectId.tsx",
      "parent": "/_main/projects",
      "children": [
        "/_main/projects/project/$projectId/events",
        "/_main/projects/project/$projectId/forms",
        "/_main/projects/project/$projectId/participants",
        "/_main/projects/project/$projectId/reports",
        "/_main/projects/project/$projectId/settings",
        "/_main/projects/project/$projectId/solvers",
        "/_main/projects/project/$projectId/tables",
        "/_main/projects/project/$projectId/tasks"
      ]
    },
    "/_main/admin/templates/": {
      "filePath": "_main/admin/templates/index.tsx",
      "parent": "/_main/admin/templates"
    },
    "/_main/admin/users/": {
      "filePath": "_main/admin/users/index.tsx",
      "parent": "/_main/admin/users"
    },
    "/_main/projects/group/": {
      "filePath": "_main/projects/group/index.tsx",
      "parent": "/_main/projects"
    },
    "/_main/admin/permissions/_p/roles": {
      "filePath": "_main/admin/permissions/_p.roles.tsx",
      "parent": "/_main/admin/permissions/_p"
    },
    "/_main/admin/templates/$templateId/edit": {
      "filePath": "_main/admin/templates/$templateId.edit.tsx",
      "parent": "/_main/admin/templates"
    },
    "/_main/projects/group/$groupId/participants": {
      "filePath": "_main/projects/group/$groupId.participants.tsx",
      "parent": "/_main/projects"
    },
    "/_main/projects/project/$projectId/events": {
      "filePath": "_main/projects/project.$projectId/events.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/projects/project/$projectId/forms": {
      "filePath": "_main/projects/project.$projectId/forms.tsx",
      "parent": "/_main/projects/project/$projectId",
      "children": [
        "/_main/projects/project/$projectId/forms/add",
        "/_main/projects/project/$projectId/forms/",
        "/_main/projects/project/$projectId/forms/$formId/edit"
      ]
    },
    "/_main/projects/project/$projectId/participants": {
      "filePath": "_main/projects/project.$projectId/participants.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/projects/project/$projectId/reports": {
      "filePath": "_main/projects/project.$projectId/reports.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/projects/project/$projectId/settings": {
      "filePath": "_main/projects/project.$projectId/settings.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/projects/project/$projectId/solvers": {
      "filePath": "_main/projects/project.$projectId/solvers.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/projects/project/$projectId/tables": {
      "filePath": "_main/projects/project.$projectId/tables.tsx",
      "parent": "/_main/projects/project/$projectId",
      "children": [
        "/_main/projects/project/$projectId/tables/$tableId/checks",
        "/_main/projects/project/$projectId/tables/$tableId/structure",
        "/_main/projects/project/$projectId/tables/$tableId/"
      ]
    },
    "/_main/projects/project/$projectId/tasks": {
      "filePath": "_main/projects/project.$projectId/tasks.tsx",
      "parent": "/_main/projects/project/$projectId"
    },
    "/_main/admin/permissions/_p/": {
      "filePath": "_main/admin/permissions/_p.index.tsx",
      "parent": "/_main/admin/permissions/_p"
    },
    "/_main/projects/group/$groupId/": {
      "filePath": "_main/projects/group/$groupId.index.tsx",
      "parent": "/_main/projects"
    },
    "/_main/projects/project/$projectId/forms/add": {
      "filePath": "_main/projects/project.$projectId/forms/add.tsx",
      "parent": "/_main/projects/project/$projectId/forms"
    },
    "/_main/projects/project/$projectId/forms/": {
      "filePath": "_main/projects/project.$projectId/forms/index.tsx",
      "parent": "/_main/projects/project/$projectId/forms"
    },
    "/_main/projects/project/$projectId/forms/$formId/edit": {
      "filePath": "_main/projects/project.$projectId/forms/$formId.edit.tsx",
      "parent": "/_main/projects/project/$projectId/forms"
    },
    "/_main/projects/project/$projectId/tables/$tableId/checks": {
      "filePath": "_main/projects/project.$projectId/tables.$tableId/checks.tsx",
      "parent": "/_main/projects/project/$projectId/tables"
    },
    "/_main/projects/project/$projectId/tables/$tableId/structure": {
      "filePath": "_main/projects/project.$projectId/tables.$tableId/structure.tsx",
      "parent": "/_main/projects/project/$projectId/tables"
    },
    "/_main/projects/project/$projectId/tables/$tableId/": {
      "filePath": "_main/projects/project.$projectId/tables.$tableId/index.tsx",
      "parent": "/_main/projects/project/$projectId/tables"
    }
  }
}
ROUTE_MANIFEST_END */
