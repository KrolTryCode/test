import {
  gridRowTreeSelector,
  gridFilteredSortedRowEntriesSelector,
  type GridGroupingColDefOverride,
  type GridRowId,
  type GridRowTreeConfig,
  type GridValidRowModel,
} from '@mui/x-data-grid-premium';

const groupingIdPrefix = 'auto-generated-row';

export function getGroupingColDef<
  T extends GridValidRowModel = any,
>(): GridGroupingColDefOverride<T> {
  return {
    hideDescendantCount: true,
    valueFormatter: (value: string, row, _col, gridApi) => {
      const groupedRowTree = gridRowTreeSelector(gridApi);

      const filteredRows = Object.values(gridFilteredSortedRowEntriesSelector(gridApi)).map(
        v => v.id,
      );
      const symId = Object.getOwnPropertySymbols(row);
      if (value === undefined || !symId[0]) {
        return '';
      }
      const id = row[symId[0]] as string;

      if (!id || !id.includes(groupingIdPrefix)) {
        return '';
      }
      const currentRow = groupedRowTree[id];

      if (!currentRow?.id) {
        return '';
      }

      const desc = getTreeNodeDescendants(groupedRowTree, currentRow.id);
      const filteredDesc = desc.filter(id => filteredRows.includes(id));
      if (currentRow.type === 'group' && currentRow.isAutoGenerated && desc.length) {
        return `${currentRow.groupingKey} (${filteredDesc.length || desc.length})`;
      }

      return '';
    },
  };
}

// node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.d.ts
function getTreeNodeDescendants(
  tree: GridRowTreeConfig,
  parentId: GridRowId,
  skipAutoGeneratedRows = true,
): GridRowId[] {
  const node = tree[parentId];
  if (node.type !== 'group') {
    return [];
  }
  const validDescendants = [];
  for (let i3 = 0; i3 < node.children.length; i3 += 1) {
    const child = node.children[i3];
    if (!skipAutoGeneratedRows || !String(tree[child].id).startsWith(groupingIdPrefix)) {
      validDescendants.push(child);
    }
    const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);
    for (let j = 0; j < childDescendants.length; j += 1) {
      validDescendants.push(childDescendants[j]);
    }
  }
  if (!skipAutoGeneratedRows && node.footerId != null) {
    validDescendants.push(node.footerId);
  }
  return validDescendants;
}
